/*
 * A C/C++ scanner.
 */

options
{
  STATIC = false;
  IGNORE_CASE = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  UNICODE_INPUT = true;
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(CPPScanner)
package de.jplag.c;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import de.jplag.ParsingException;

import static de.jplag.c.CTokenType.*;

public class CPPScanner {
    private Scanner delegatingScanner;

    public static void scanFile(File file, Scanner delegatingScanner) throws ParsingException {
        CPPScanner scanner;
        try (InputStream input = new NewlineStream(new FileInputStream(file))) {
            scanner = new CPPScanner(input, "UTF-8");
            scanner.delegatingScanner = delegatingScanner;
        } catch (IOException e) {
            System.out.println("C/C++ Scanner: File " + file.getName() + " not found.");
            throw new ParsingException(file, e.getMessage(), e);
        }
        try {
            scanner.scan();
        } catch (ParseException e) {
            delegatingScanner.logger.error("Parsing Error in '" + file.getName() + "': " + e.getMessage());
            throw new ParsingException(file, e.getMessage(), e);
        } catch (TokenMgrException e) {
            delegatingScanner.logger.error("Scanning Error in '" + file.getName() + "': " + e.getMessage());
            throw new ParsingException(file, e.getMessage(), e);
        }
    }
}
PARSER_END(CPPScanner)




SKIP :
{
  " "
| "\t"
| "\f"
| "\n"
| "\r"
| "\u001a"

| "//" : IN_LINE_COMMENT
| "/*" : IN_COMMENT
| "#" : PREPROCESSOR_OUTPUT
}

<IN_LINE_COMMENT> SKIP:
{
   "\n" : DEFAULT
}
<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}

<IN_COMMENT> SKIP:
{
   "*/" : DEFAULT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}

<PREPROCESSOR_OUTPUT> SKIP:
{
  "\\" : PREPROCESSOR_OUTPUT2
}
<PREPROCESSOR_OUTPUT2> MORE:
{
  "\\" : PREPROCESSOR_OUTPUT
}
<PREPROCESSOR_OUTPUT> SKIP:
{
  "\n" : DEFAULT
}
<PREPROCESSOR_OUTPUT2> SKIP:
{
  "\n" : PREPROCESSOR_OUTPUT
}
<PREPROCESSOR_OUTPUT, PREPROCESSOR_OUTPUT2> MORE:
{
  < ~[] >
}


TOKEN :
{
  < LCURLYBRACE: "{" >
| < RCURLYBRACE: "}" >
| < LSQUAREBRACKET: "[" >
| < RSQUAREBRACKET: "]" >
| < LPARENTHESIS: "(" >
| < RPARENTHESIS: ")" >
| < SCOPE: "::" >
| < COLON: ":" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < QUESTIONMARK: "?" >
| < ELLIPSIS: "..." >
| < ASSIGNEQUAL: "=" >
| < TIMESEQUAL: "*=" >
| < DIVIDEEQUAL: "/=" >
| < MODEQUAL: "%=" >
| < PLUSEQUAL: "+=" >
| < MINUSEQUAL: "-=" >
| < SHIFTLEFTEQUAL: "<<=" >
| < SHIFTRIGHTEQUAL: ">>=" >
| < BITWISEANDEQUAL: "&=" >
| < BITWISEXOREQUAL: "^=" >
| < BITWISEOREQUAL: "|=" >
| < OR: "||" >
| < AND: "&&" >
| < BITWISEOR: "|" >
| < BITWISEXOR: "^" >
| < AMPERSAND: "&" >
| < EQUAL: "==" >
| < NOTEQUAL: "!=" >
| < LESSTHAN: "<" >
| < GREATERTHAN: ">" >
| < LESSTHANOREQUALTO: "<=" >
| < GREATERTHANOREQUALTO: ">=" >
| < SHIFTLEFT: "<<" >
| < SHIFTRIGHT: ">>" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < DIVIDE: "/" >
| < MOD: "%" >
| < PLUSPLUS: "++" >
| < MINUSMINUS: "--" >
| < TILDE: "~" >
| < NOT: "!" >
| < DOT: "." >
| < POINTERTO: "->" >
| < DOTSTAR: ".*" >
| < ARROWSTAR: "->*" >
| < AUTO: "auto" >
| < BREAK: "break" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DELETE: "delete" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTERN: "extern" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FRIEND: "friend" >
| < GOTO: "goto" >
| < IF: "if" >
| < INLINE: "inline" >
| < INT: "int" >
| < LONG: "long" >
| < NEW: "new" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < REDECLARED: "redeclared" >
| < REGISTER: "register" >
| < RETURN: "return" >
| < SHORT: "short" >
| < SIGNED: "signed" >
| < SIZEOF: "sizeof" >
| < STATIC: "static" >
| < STRUCT: "struct" >
| < CLASS : "class" >
| < SWITCH: "switch" >
| < TEMPLATE: "template" >
| < THIS: "this" >
| < TRY: "try" >
| < TYPEDEF: "typedef" >
| < UNION: "union" >
| < UNSIGNED: "unsigned" >
| < VIRTUAL: "virtual" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < OPERATOR: "operator" >
| < TRUETOK: "true" >
| < FALSETOK: "false" >
| < THROW: "throw" >
| < NULL: "NULL" >
| < BACKSLASH: "\\">
}

TOKEN [IGNORE_CASE] :
{
  <  OCTALINT : "0" (["0"-"7"])* >
| <  OCTALLONG : <OCTALINT> "l" >
| <  UNSIGNED_OCTALINT : <OCTALINT> "u" >
| <  UNSIGNED_OCTALLONG : <OCTALINT> ("ul" | "lu") >

| <  DECIMALINT : ["1"-"9"] (["0"-"9"])* >
| <  DECIMALLONG : <DECIMALINT> ["u","l"] >
| <  UNSIGNED_DECIMALINT : <DECIMALINT> "u" >
| <  UNSIGNED_DECIMALLONG : <DECIMALINT> ("ul" | "lu") >

| <  HEXADECIMALINT : "0x" (["0"-"9","a"-"f"])+ >
| <  HEXADECIMALLONG : <HEXADECIMALINT> (["u","l"])? >
| <  UNSIGNED_HEXADECIMALINT : <HEXADECIMALINT> "u" >
| <  UNSIGNED_HEXADECIMALLONG : <HEXADECIMALINT> ("ul" | "lu") >


| <  FLOATONE : ((["0"-"9"])+ "." (["0"-"9"])* | (["0"-"9"])* "." (["0"-"9"])+)
              ("e" (["-","+"])? (["0"-"9"])+)? (["f","l"])? >

| <  FLOATTWO : (["0"-"9"])+ "e" (["-","+"])?  (["0"-"9"])+ (["f","l"])? >
}

TOKEN :
{
  <  CHARACTER : ("L")? "'"
   (   (~["'","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
           | "0" (["0"-"7"])*
           | ["1"-"9"] (["0"-"9"])*
           | ("X" | "x" | "U" | "u") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )
   "'" >

| <  STRING : ("L")? "\""
   ( ( ~["\"","\\"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
           | "0" (["0"-"7"])*
           | ["1"-"9"] (["0"-"9"])*
           | ("X" | "x" | "U" | "u") (["0"-"9","a"-"f","A"-"F"])+
	   | "\n"
           )
     )
   )*
   "\"" >
}

TOKEN :
{
  <  ID : (
      ["a"-"z","A"-"Z", "_"]
    | ["\u00A8", "\u00AA", "\u00AD", "\u00AF", "\u00B2"-"\u00B5", "\u00B7"-"\u00BA", "\u00BC"-"\u00BE", "\u00C0"-"\u00D6",
    "\u00D8"-"\u00F6", "\u00F8"-"\u00FF"]
    | ["\u0100"-"\u167F", "\u1681"-"\u180D", "\u180F"-"\u1FFF"]
    | ["\u200B"-"\u200D", "\u202A"-"\u202E", "\u203F"-"\u2040", "\u2054", "\u2060"-"\u206F"]
    | ["\u2070"-"\u218F", "\u2460"-"\u24FF", "\u2776"-"\u2793", "\u2C00"-"\u2DFF", "\u2E80"-"\u2FFF"]
    | ["\u3004"-"\u3007", "\u3021"-"\u302F", "\u3031"-"\u303F"]
    | ["\u3040"-"\uD7FF"]
    | ["\uF900"-"\uFD3D", "\uFD40"-"\uFDCF", "\uFDF0"-"\uFE44", "\uFE47"-"\uFFFD"]
    /* unsupported by javacc
      | ["\u10000"-"\u1FFFD", "\u20000"-"\u2FFFD", "\u30000"-"\u3FFFD", "\u40000"-"\u4FFFD", "\u50000"-"\u5FFFD",
      "\u60000"-"\u6FFFD", "\u70000"-"\u7FFFD", "\u80000"-"\u8FFFD", "\u90000"-"\u9FFFD", "\uA0000"-"\uAFFFD",
      "\uB0000"-"\uBFFFD", "\uC0000"-"\uCFFFD", "\uD0000"-"\uDFFFD", "\uE0000"-"\uEFFFD"]
    */
   )
   (
    ["a"-"z","A"-"Z","0"-"9","_"]
    | ["\u00A8", "\u00AA", "\u00AD", "\u00AF", "\u00B2"-"\u00B5", "\u00B7"-"\u00BA", "\u00BC"-"\u00BE", "\u00C0"-"\u00D6",
    "\u00D8"-"\u00F6", "\u00F8"-"\u00FF"]
    | ["\u0100"-"\u167F", "\u1681"-"\u180D", "\u180F"-"\u1FFF"]
    | ["\u200B"-"\u200D", "\u202A"-"\u202E", "\u203F"-"\u2040", "\u2054", "\u2060"-"\u206F"]
    | ["\u2070"-"\u218F", "\u2460"-"\u24FF", "\u2776"-"\u2793", "\u2C00"-"\u2DFF", "\u2E80"-"\u2FFF"]
    | ["\u3004"-"\u3007", "\u3021"-"\u302F", "\u3031"-"\u303F"]
    | ["\u3040"-"\uD7FF"]
    | ["\uF900"-"\uFD3D", "\uFD40"-"\uFDCF", "\uFDF0"-"\uFE44", "\uFE47"-"\uFFFD"]
    /* unsupported by javacc
      | ["\u10000"-"\u1FFFD", "\u20000"-"\u2FFFD", "\u30000"-"\u3FFFD", "\u40000"-"\u4FFFD", "\u50000"-"\u5FFFD",
      "\u60000"-"\u6FFFD", "\u70000"-"\u7FFFD", "\u80000"-"\u8FFFD", "\u90000"-"\u9FFFD", "\uA0000"-"\uAFFFD",
      "\uB0000"-"\uBFFFD", "\uC0000"-"\uCFFFD", "\uD0000"-"\uDFFFD", "\uE0000"-"\uEFFFD"]
    */
   )* >
}



void scan(): {}
{
  (token())* <EOF>
}

void token(): {}
{
  "{"            { delegatingScanner.add(C_BLOCK_BEGIN,token); }
| "}"            { delegatingScanner.add(C_BLOCK_END,token); }
| "["
| "]"
| "("
| ")"
| "::"
| ":"
| ";"
| ","
| "?"            { delegatingScanner.add(C_QUESTIONMARK,token); }
| "..."          { delegatingScanner.add(C_ELLIPSIS,token); }
| "="            { delegatingScanner.add(C_ASSIGN,token); }
| "*="           { delegatingScanner.add(C_ASSIGN,token); }
| "/="           { delegatingScanner.add(C_ASSIGN,token); }
| "%="           { delegatingScanner.add(C_ASSIGN,token); }
| "+="           { delegatingScanner.add(C_ASSIGN,token); }
| "-="           { delegatingScanner.add(C_ASSIGN,token); }
| "<<="          { delegatingScanner.add(C_ASSIGN,token); }
| ">>="          { delegatingScanner.add(C_ASSIGN,token); }
| "&="           { delegatingScanner.add(C_ASSIGN,token); }
| "^="           { delegatingScanner.add(C_ASSIGN,token); }
| "|="           { delegatingScanner.add(C_ASSIGN,token); }
| "||"
| "&&"
| "|"
| "^"
| "&"
| "=="
| "!="
| "<"
| ">"
| "<="
| ">="
| "<<"
| ">>"
| "+"
| "-"
| "*"
| "/"
| "%"
| "++"           { delegatingScanner.add(C_ASSIGN,token); }
| "--"           { delegatingScanner.add(C_ASSIGN,token); }
| "~"
| "!"
| "auto"         { delegatingScanner.add(C_AUTO,token); }
| "break"        { delegatingScanner.add(C_BREAK,token); }
| "case"         { delegatingScanner.add(C_CASE,token); }
| "catch"        { delegatingScanner.add(C_CATCH,token); }
| "char"         { delegatingScanner.add(C_CHAR,token); }
| "const"        { delegatingScanner.add(C_CONST,token); }
| "continue"     { delegatingScanner.add(C_CONTINUE,token); }
| "default"      { delegatingScanner.add(C_DEFAULT,token); }
| "delete"       { delegatingScanner.add(C_DELETE,token); }
| "do"           { delegatingScanner.add(C_DO,token); }
| "double"       { delegatingScanner.add(C_DOUBLE,token); }
| "else"         { delegatingScanner.add(C_ELSE,token); }
| "enum"         { delegatingScanner.add(C_ENUM,token); }
| "extern"       { delegatingScanner.add(C_EXTERN,token); }
| "float"        { delegatingScanner.add(C_FLOAT,token); }
| "for"          { delegatingScanner.add(C_FOR,token); }
| "friend"       { delegatingScanner.add(C_FRIEND,token); }
| "goto"         { delegatingScanner.add(C_GOTO,token); }
| "if"           { delegatingScanner.add(C_IF,token); }
| "inline"       { delegatingScanner.add(C_INLINE,token); }
| "int"          { delegatingScanner.add(C_INT,token); }
| "long"         { delegatingScanner.add(C_LONG,token); }
| "new"          { delegatingScanner.add(C_NEW,token); }
| "private"      { delegatingScanner.add(C_PRIVATE,token); }
| "protected"    { delegatingScanner.add(C_PROTECTED,token); }
| "public"       { delegatingScanner.add(C_PUBLIC,token); }
| "redeclared"   { delegatingScanner.add(C_REDECLARED,token); }
| "register"     { delegatingScanner.add(C_REGISTER,token); }
| "return"       { delegatingScanner.add(C_RETURN,token); }
| "short"        { delegatingScanner.add(C_SHORT,token); }
| "signed"       { delegatingScanner.add(C_SIGNED,token); }
| "sizeof"       { delegatingScanner.add(C_SIZEOF,token); }
| "static"       { delegatingScanner.add(C_STATIC,token); }
| "struct"       { delegatingScanner.add(C_STRUCT,token); }
| "class"        { delegatingScanner.add(C_CLASS,token); }
| "switch"       { delegatingScanner.add(C_SWITCH,token); }
| "template"     { delegatingScanner.add(C_TEMPLATE,token); }
| "this"         { delegatingScanner.add(C_THIS,token); }
| "try"          { delegatingScanner.add(C_TRY,token); }
| "typedef"      { delegatingScanner.add(C_TYPEDEF,token); }
| "union"        { delegatingScanner.add(C_UNION,token); }
| "unsigned"     { delegatingScanner.add(C_UNSIGNED,token); }
| "virtual"      { delegatingScanner.add(C_VIRTUAL,token); }
| "void"         { delegatingScanner.add(C_VOID,token); }
| "volatile"     { delegatingScanner.add(C_VOLATILE,token); }
| "while"        { delegatingScanner.add(C_WHILE,token); }
| "operator"     { delegatingScanner.add(C_OPERATOR,token); }
| "true"
| "false"
| "throw"        { delegatingScanner.add(C_THROW,token); }
| "NULL"         { delegatingScanner.add(C_NULL,token); }

| <OCTALINT>
| <OCTALLONG>
| <UNSIGNED_OCTALINT>
| <UNSIGNED_OCTALLONG>
| <DECIMALINT>
| <DECIMALLONG>
| <UNSIGNED_DECIMALINT>
| <UNSIGNED_DECIMALLONG>

| <HEXADECIMALINT>
| <HEXADECIMALLONG>
| <UNSIGNED_HEXADECIMALINT>
| <UNSIGNED_HEXADECIMALLONG>

| <FLOATONE>
| <FLOATTWO>

| <CHARACTER>
| <STRING>

| <BACKSLASH>

       //| var() [LOOKAHEAD(2) "("        { delegatingScanner.add(C_FUN,token); } ]
| "."
| "->"
| ".*"
| "->*"
| <ID>
}

void var(): {}
{
    <ID> [LOOKAHEAD(2) "[" [index()] "]"] [var1()]
}

void var1(): {}
{
  ("." | "->" | ".*" | "->*") <ID> [LOOKAHEAD(2) "[" [index()] "]"] [var2()]
}

void var2(): {}
{
  ("." | "->" | ".*" | "->*") <ID> [LOOKAHEAD(2) "[" [index()] "]"] [var3()]
}

void var3(): {}
{
  ("." | "->" | ".*" | "->*") <ID> [LOOKAHEAD(2) "[" [index()] "]"]
    (("." | "->" | ".*" | "->*") <ID> [LOOKAHEAD(2) "[" [index()] "]"])*
}


void index(): {}
{
  var()
| <OCTALINT>
| <OCTALLONG>
| <UNSIGNED_OCTALINT>
| <UNSIGNED_OCTALLONG>
| <DECIMALINT>
| <DECIMALLONG>
| <UNSIGNED_DECIMALINT>
| <UNSIGNED_DECIMALLONG>

| <HEXADECIMALINT>
| <HEXADECIMALLONG>
| <UNSIGNED_HEXADECIMALINT>
| <UNSIGNED_HEXADECIMALLONG>

}





